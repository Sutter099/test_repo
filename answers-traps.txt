1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?

    ANS:
    In riscv, a0-a7 and fa0-fa7 are used to pass arguments.

    In this example, reg `a1` and `a2` contains arguments to function `printf`:
    - `a1 == 12`(8 + 3 + 1)
    - `a2 == 13`
    - `a0 == 0x7d0`(pointer to string "%d %d\n" ?)

2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)

    ANS:
    call to func `f` and func `g` are inlined by compiler.

3. At what address is the function printf located?

    ANS:
    in addr: 0x616

4. What value is in the register ra just after the jalr to printf in main?
Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?

Here's a description of little- and big-endian and a more whimsical description.

    ANS:
    57616 == 0xe110
    just after jalr to printf, ra is 66

    output is `HE110 World`
    0x64 == 'd', 0x6c == 'l', 0x72 == 'r'. In big-endian, we need to change `57616` to `4321`, and 0x00646c72 to 0x726c6400.

5. In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);

    value of reg `a2` will be printed after `y=`.
      
